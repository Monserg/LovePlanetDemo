//
//  UsersListShowViewController.swift
//  LovePlanetDemo
//
//  Created by msm72 on 21.09.17.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol UsersListShowDisplayLogic: class {
    func displaySomething(viewModel: UsersListShowModels.Something.ViewModel)
}

class UsersListShowViewController: UITableViewController {
    // MARK: - Properties
    var interactor: UsersListShowBusinessLogic?
    var router: (NSObjectProtocol & UsersListShowRoutingLogic & UsersListShowDataPassing)?
    
    
    // MARK: - IBOutlets
    // @IBOutlet weak var nameTextField: UITextField!

    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController  =   self
        let interactor      =   UsersListShowInteractor()
        let presenter       =   UsersListShowPresenter()
        let router          =   UsersListShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Create title
        self.navigationItem.title = NSLocalizedString("Users List", comment: "Users list title")
        
        // Create Close bar button
        self.navigationItem.leftBarButtonItem = UIBarButtonItem.init(title: NSLocalizedString("Close", comment: "Back button"),
                                                                            style: .done,
                                                                            target: self,
                                                                            action: #selector(handlerCloseButtonTap(_:)))

        // Create Add button
        self.navigationItem.rightBarButtonItem = UIBarButtonItem.init(barButtonSystemItem: .add,
                                                                      target: self,
                                                                      action: #selector(handlerAddButtonTap(_:)))
        
        let requestModel = UsersListShowModels.Something.RequestModel()
        
        interactor?.doSomething(request: requestModel)
    }
    
    
    // MARK: - Actions
    @objc func handlerCloseButtonTap(_ sender: UIBarButtonItem) {
        self.dismiss(animated: true)
    }
    
    @objc func handlerAddButtonTap(_ sender: UIBarButtonItem) {

    }
}


// MARK: - UsersListShowDisplayLogic
extension UsersListShowViewController: UsersListShowDisplayLogic {
    func displaySomething(viewModel: UsersListShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
    }
}
