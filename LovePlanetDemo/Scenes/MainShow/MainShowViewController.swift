//
//  MainShowViewController.swift
//  LovePlanetDemo
//
//  Created by msm72 on 21.09.17.
//  Copyright (c) 2017 RemoteJob. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol MainShowDisplayLogic: class {
    func displaySomething(viewModel: MainShowModels.Something.ViewModel)
}

class MainShowViewController: UIViewController {
    // MARK: - Properties
    var interactor: MainShowBusinessLogic?
    var router: (NSObjectProtocol & MainShowRoutingLogic & MainShowDataPassing)?
    
    
    // MARK: - IBOutlets
    // @IBOutlet weak var nameTextField: UITextField!
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    
    // MARK: - Setup
    private func setup() {
        let viewController  =   self
        let interactor      =   MainShowInteractor()
        let presenter       =   MainShowPresenter()
        let router          =   MainShowRouter()
        
        viewController.interactor   =   interactor
        viewController.router       =   router
        interactor.presenter        =   presenter
        presenter.viewController    =   viewController
        router.viewController       =   viewController
        router.dataStore            =   interactor
    }
    
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Create main view
        view.backgroundColor = UIColor.white
        
        // Create CircleButton
        let circleButton = CircleButton.init(frame: CGRect(origin: view.center, size: CGSize(width: 100, height: 100)))
        circleButton.addTarget(self, action: #selector(handlerButtonTouchDown(_:)), for: .touchDown)
        circleButton.addTarget(self, action: #selector(handlerButtonTouchUpInside(_:)), for: .touchUpInside)
        view.addSubview(circleButton)
        circleButton.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true
        circleButton.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true
        
        let requestModel = MainShowModels.Something.RequestModel()
        interactor?.doSomething(request: requestModel)
    }
    
    
    // MARK: - Actions
    @objc func handlerButtonTouchDown(_ sender: CircleButton) {
        sender.modifyState(true)
    }

    @objc func handlerButtonTouchUpInside(_ sender: CircleButton) {
        sender.modifyState(false)
        router?.routeToUsersShowScene()
    }
}


// MARK: - MainShowDisplayLogic
extension MainShowViewController: MainShowDisplayLogic {
    func displaySomething(viewModel: MainShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}
